name: Deploy SSIS Package and Create Job

on:
  workflow_run:
    workflows: ["Setup Database and Tables"]
    types:
      - completed

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set PowerShell Execution Policy
        run: |
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -Force
          $currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
          Write-Host "Execution policy set to: $currentPolicy"

      - name: Deploy SSIS Package
        run: |
          & "C:\Program Files (x86)\Microsoft SQL Server\160\DTS\Binn\ISDeploymentWizard.exe" @("/Silent", "/ModelType:Project", "/SourcePath:`"${{ github.workspace }}\HandsOnProject\Timesheet\SSISProject - Copy\bin\Development\SSISProject.ispac`"", "/DestinationServer:`.", "/DestinationPath:`"/SSISDB/SSISProjectRun/SSISProject`"")
          if ($LASTEXITCODE -ne 0) { throw "ISDeploymentWizard.exe failed with exit code $LASTEXITCODE" }

      - name: Revert PowerShell Execution Policy
        run: |
          Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Restricted -Force
          $currentPolicy = Get-ExecutionPolicy -Scope CurrentUser
          Write-Host "Execution policy reverted to: $currentPolicy"

      - name: Create SQL Server Agent Job
        run: sqlcmd -S . -U ${{ secrets.SQL_USERNAME }} -P ${{ secrets.SQL_PASSWORD }} -i HandsOnProject/Timesheet/CreateAgentJob.sql

      - name: Start SQL Server Agent Job
        run: sqlcmd -S . -U ${{ secrets.SQL_USERNAME }} -P ${{ secrets.SQL_PASSWORD }} -Q "EXEC msdb.dbo.sp_start_job @job_name = N'RunTimesheetEntryEveryMinute';"
