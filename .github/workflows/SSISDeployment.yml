name: Timesheet SSIS Deployment

on:
  workflow_dispatch: # Can be triggered manually or by the first workflow
  workflow_run:
    workflows: ["Timesheet Database Setup and Job Management"]
    types: [completed]

env:
  SSIS_PACKAGE_NAME: "TimesheetEntry.dtsx" # Adjust to your package name
  SSIS_FOLDER_NAME: "SSISProjectRun"       # Folder in SSISDB
  SSIS_PROJECT_NAME: "SSISProject"         # Project name in SSISDB

jobs:
  deploy-ssis:
    runs-on: self-hosted # Replace with your runner label
    
    steps:
    # 1. Configure Git for long paths
    - name: Configure Git long paths
      run: |
        git config --global core.longpaths true
      shell: cmd

    # 2. Checkout code with long path support
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: false # Disable LFS if not needed to avoid additional path issues

    # 3. Deploy SSIS Package
    - name: Deploy SSIS Package
      run: |
        set ispacPath=HandsOnProject\Timesheet\SSISProject - Copy\bin\Development\SSISProject.ispac
        
        if not exist "%ispacPath%" (
          echo ISPAC file not found at: %ispacPath%
          exit /b 1
        )
        
        for /f "delims=" %%i in ('certutil -encodehex "%ispacPath%" ^| findstr /v "CertUtil"') do set projectBytes=%%i
        set projectBytes=%projectBytes: =%
        
        set deploySql=USE SSISDB;
        set deploySql=%deploySql% DECLARE @folder_name NVARCHAR(128) = '%SSIS_FOLDER_NAME%';
        set deploySql=%deploySql% DECLARE @project_name NVARCHAR(128) = '%SSIS_PROJECT_NAME%';
        set deploySql=%deploySql% DECLARE @project_stream VARBINARY(MAX) = 0x%projectBytes%;
        set deploySql=%deploySql% IF NOT EXISTS (SELECT 1 FROM catalog.folders WHERE name = @folder_name) BEGIN
        set deploySql=%deploySql%   EXEC catalog.create_folder @folder_name;
        set deploySql=%deploySql% END
        set deploySql=%deploySql% EXEC catalog.deploy_project @folder_name, @project_name, @project_stream;
        
        echo %deploySql% > deploy_ssis.sql
        
        sqlcmd -b -S "%PINGGY_TOKEN%" -i deploy_ssis.sql
        if errorlevel 1 exit /b %errorlevel%
      shell: cmd
