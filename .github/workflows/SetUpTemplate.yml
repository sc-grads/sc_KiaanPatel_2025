name: Reusable SQL Server Setup Template

on:
  workflow_call:
    inputs:
      server_url:
        description: 'SQL Server URL to connect to'
        required: true
        type: string
      script_path:
        description: 'Path to the SQL script to execute'
        required: true
        type: string
    secrets:
      sql_password:
        required: true

jobs:
  setup-sql:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to access SQL script
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Add Microsoft repository for SQL Server tools
      - name: Add Microsoft repository for SQL Server tools
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update

      # Install SQL Server client (sqlcmd)
      - name: Install SQL Server client
        run: |
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev

      # Add SQL Server tools to PATH
      - name: Add SQL Server tools to PATH
        run: |
          echo "/opt/mssql-tools/bin" >> $GITHUB_PATH

      # Test connection to SQL Server with error handling
      - name: Test Connection to SQL Server
        id: test-connection
        env:
          SERVER_URL: ${{ inputs.server_url }}
          SQL_PASSWORD: ${{ secrets.sql_password }}
        run: |
          sqlcmd -S "$SERVER_URL" -U Auto_user -P "$SQL_PASSWORD" -C -Q "SELECT @@VERSION" || echo "Connection failed: check server, user, or password"
        continue-on-error: true

      # Handle connection success
      - name: Connection Success
        if: steps.test-connection.outcome == 'success'
        run: echo "Successfully connected to SQL Server!"

      # Handle connection failure
      - name: Connection Failure
        if: steps.test-connection.outcome == 'failure'
        run: |
          echo "Failed to connect to SQL Server. Please check the server URL, username, or password."
          exit 1

      # Execute the SQL script with error handling
      - name: Setup Database
        id: setup-db
        env:
          SERVER_URL: ${{ inputs.server_url }}
          SQL_PASSWORD: ${{ secrets.sql_password }}
        run: |
          sqlcmd -S "$SERVER_URL" -U Auto_user -P "$SQL_PASSWORD" -C -i "${{ inputs.script_path }}"
        continue-on-error: true

      # Handle setup success
      - name: Setup Success
        if: steps.setup-db.outcome == 'success'
        run: echo "Database setup completed successfully!"

      # Handle setup failure
      - name: Setup Failure
        if: steps.setup-db.outcome == 'failure'
        run: |
          echo "Failed to set up the database. Check the SQL script or server permissions."
          exit 1

      # Test the setup by querying the server
      - name: Test Connection and Data
        id: test-data
        env:
          SERVER_URL: ${{ inputs.server_url }}
          SQL_PASSWORD: ${{ secrets.sql_password }}
        run: |
          sqlcmd -S "$SERVER_URL" -U Auto_user -P "$SQL_PASSWORD" -C -Q "SELECT @@VERSION" || echo "Connection failed: check server, user, or password"
        continue-on-error: true

      # Handle test success
      - name: Test Success
        if: steps.test-data.outcome == 'success'
        run: echo "Data test completed successfully!"

      # Handle test failure
      - name: Test Failure
        if: steps.test-data.outcome == 'failure'
        run: |
          echo "Failed to query the database. Check the setup or data integrity."
          exit 1
