name: Timesheet Project Full Deployment

on:
  workflow_dispatch: # Manual trigger only

env:
  SSIS_PROJECT_PATH: "SSISProject - Copy" # Your exact folder name
  SSIS_PACKAGE_NAME: "TimesheetEntry.dtsx" # Confirmed package name
  SSIS_FOLDER_NAME: "SSISProjectRun" # From your SSMS screenshot

jobs:
  deploy-and-execute:
    runs-on: windows-latest
    
    steps:
    # 1. Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 2. Install required tools
    - name: Install SQL and SSIS tools
      run: |
        choco install sqlserver-cmdlineutils -y --no-progress
        choco install sql-server-management-studio -y --no-progress --params="'/InstallType=All'"
        if (-not (Test-Path "${env:ProgramFiles(x86)}\Microsoft SQL Server Management Studio 19\Common7\IDE\ISDeploymentWizard.exe")) {
          Write-Error "SSIS tools installation failed"
          exit 1
        }

    # 3. Database setup
    - name: Execute database setup
      run: |
        sqlcmd -b -t 600 -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -i "HandsOnProject/Timesheet/TableAndDBSetup.sql"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

    # 4. Deploy SSIS package (EXACT PATH CONFIGURATION)
    - name: Deploy SSIS Package
      run: |
        $ispacPath = "HandsOnProject/Timesheet/${{ env.SSIS_PROJECT_PATH }}/bin/Development/SSISProject.ispac"
        if (-not (Test-Path $ispacPath)) {
          Write-Error "ISPAC file not found at: $ispacPath"
          Get-ChildItem -Recurse -Include *.ispac
          exit 1
        }

        Write-Output "=== Deploying SSIS package ==="
        Write-Output "Source: $ispacPath"
        Write-Output "Destination: /SSISDB/${{ env.SSIS_FOLDER_NAME }}/SSISProject"
        
        & "${env:ProgramFiles(x86)}\Microsoft SQL Server Management Studio 19\Common7\IDE\ISDeploymentWizard.exe" `
          /Silent `
          /ModelType:Project `
          /SourcePath:"$ispacPath" `
          /DestinationServer:"${{ secrets.PINGGY_TOKEN }}" `
          /DestinationPath:"/SSISDB/${{ env.SSIS_FOLDER_NAME }}/SSISProject" `
          /DestinationUser:"${{ secrets.SQL_USERNAME }}" `
          /DestinationPassword:"${{ secrets.SQL_PASSWORD }}"
        
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

    # 5. Create/Update SQL Agent Job (CONFIRMED PACKAGE NAME)
    - name: Setup SQL Agent Job
      run: |
        $jobScript = @"
        USE msdb;
        
        BEGIN TRY
          IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
          BEGIN
            BEGIN TRANSACTION;
            
            EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
            
            EXEC sp_add_jobstep
              @job_name = N'TimesheetProjectRun',
              @step_name = N'Run SSIS Package',
              @subsystem = N'SSIS',
              @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\SSISProject\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E',
              @database_name = N'master';
              
            EXEC dbo.sp_add_jobschedule
              @job_name = N'TimesheetProjectRun',
              @name = N'RunNow',
              @enabled = 1,
              @freq_type = 1,
              @active_start_date = $(Get-Date -Format yyyyMMdd),
              @active_start_time = $(Get-Date -Format HHmmss);
              
            EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
            COMMIT TRANSACTION;
            SELECT 'Job created successfully' AS Result;
          END
          ELSE
          BEGIN
            EXEC sp_update_jobstep
              @job_name = N'TimesheetProjectRun',
              @step_id = 1,
              @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\SSISProject\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E';
            SELECT 'Job updated successfully' AS Result;
          END
        END TRY
        BEGIN CATCH
          SELECT ERROR_MESSAGE() AS Error;
          IF @@TRANCOUNT > 0 ROLLBACK;
          THROW;
        END CATCH
        "@
        
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -Q "$jobScript"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

    # 6. Execute and verify with extended timeout
    - name: Execute and Verify
      timeout-minutes: 15 # Overall timeout
      run: |
        # Start the job
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -Q "USE msdb; EXEC dbo.sp_start_job N'TimesheetProjectRun';"
        
        # Enhanced monitoring
        $verifySql = @"
        USE msdb;
        DECLARE @finalStatus INT = 0;
        DECLARE @finalMessage NVARCHAR(2000) = '';
        DECLARE @waitTime INT = 0;
        DECLARE @maxWait INT = 720; -- 12 minute timeout
        
        WHILE @waitTime < @maxWait
        BEGIN
          DECLARE @currentStatus INT;
          DECLARE @currentMessage NVARCHAR(2000);
          
          SELECT TOP 1 
            @currentStatus = run_status,
            @currentMessage = message
          FROM sysjobhistory 
          WHERE job_id = (SELECT job_id FROM sysjobs WHERE name = N'TimesheetProjectRun')
          ORDER BY instance_id DESC;
          
          IF @currentStatus IS NULL
          BEGIN
            SET @finalMessage = 'Job not started yet...';
            WAITFOR DELAY '00:00:15';
            SET @waitTime = @waitTime + 15;
            CONTINUE;
          END
          
          IF @currentStatus = 2 -- In Progress
          BEGIN
            SET @finalMessage = 'Job in progress...';
            WAITFOR DELAY '00:00:15';
            SET @waitTime = @waitTime + 15;
            CONTINUE;
          END
          
          -- Job completed
          SET @finalStatus = @currentStatus;
          SET @finalMessage = @currentMessage;
          BREAK;
        END
        
        -- Final output
        SELECT 
          CASE @finalStatus
            WHEN 1 THEN 'SUCCESS'
            WHEN 3 THEN 'CANCELED'
            WHEN 0 THEN 'FAILED'
            ELSE 'TIMEOUT'
          END AS JobStatus,
          @finalMessage AS JobMessage,
          @waitTime AS WaitTimeSeconds;
        
        -- Data verification
        USE TimesheetDB;
        SELECT 
          (SELECT COUNT(*) FROM Employee) AS EmployeeRecords,
          (SELECT COUNT(*) FROM Timesheet) AS TimesheetRecords;
        "@
        
        sqlcmd -b -t 900 -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -Q "$verifySql"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
