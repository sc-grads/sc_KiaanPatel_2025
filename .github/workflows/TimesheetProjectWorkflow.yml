name: Timesheet Database Setup and Job Management

on:
  workflow_dispatch: # Manual trigger

env:
  SSIS_PACKAGE_NAME: "TimesheetEntry.dtsx" # Adjust to your package name
  SSIS_FOLDER_NAME: "SSISProjectRun"       # Folder in SSISDB
  SSIS_PROJECT_NAME: "SSISProject"         # Project name in SSISDB

jobs:
  setup-and-trigger:
    runs-on: windows-latest
    
    steps:
    # 1. Checkout code
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Execute database setup script
    - name: Execute database setup
      run: |
        sqlcmd -b -t 600 -S "${{ secrets.PINGGY_TOKEN }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -i "HandsOnProject/Timesheet/TableAndDBSetup.sql"
      shell: cmd

    # 3. Trigger SSIS Deployment Workflow
    - name: Trigger SSIS Deployment
      run: |
        gh workflow run deploy-ssis.yml --repo ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash

    # 4. Create/Update SQL Agent Job
    - name: Setup SQL Agent Job
      run: |
        $jobScript = @"
        USE msdb;
        
        IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
        BEGIN
          EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
          
          EXEC sp_add_jobstep
            @job_name = N'TimesheetProjectRun',
            @step_name = N'Run SSIS Package',
            @subsystem = N'SSIS',
            @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E',
            @database_name = N'master';
          
          EXEC dbo.sp_add_jobschedule
            @job_name = N'TimesheetProjectRun',
            @name = N'RunNow',
            @enabled = 1,
            @freq_type = 1,
            @active_start_date = $(Get-Date -Format yyyyMMdd),
            @active_start_time = $(Get-Date -Format HHmmss);
          
          EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
        END
        ELSE
        BEGIN
          EXEC sp_update_jobstep
            @job_name = N'TimesheetProjectRun',
            @step_id = 1,
            @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E';
        END
        "@
        $jobScript | Out-File -FilePath "setup_job.sql" -Encoding UTF8
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -i "setup_job.sql"
      shell: pwsh

    # 5. Execute and Verify Job
    - name: Execute and Verify
      timeout-minutes: 15
      run: |
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -Q "USE msdb; EXEC dbo.sp_start_job N'TimesheetProjectRun';"
        
        $verifySql = @"
        USE msdb;
        DECLARE @finalStatus INT = 0;
        DECLARE @waitTime INT = 0;
        WHILE @waitTime < 720
        BEGIN
          SELECT TOP 1 @finalStatus = run_status FROM sysjobhistory WHERE job_id = (SELECT job_id FROM sysjobs WHERE name = N'TimesheetProjectRun') ORDER BY instance_id DESC;
          IF @finalStatus IS NULL OR @finalStatus = 2
          BEGIN
            WAITFOR DELAY '00:00:15';
            SET @waitTime = @waitTime + 15;
          END
          ELSE
          BEGIN
            BREAK;
          END
        END
        IF @finalStatus = 1
          SELECT 'Job succeeded' AS Result;
        ELSE
          SELECT 'Job failed or timed out' AS Result;
        "@
        $verifySql | Out-File -FilePath "verify_job.sql" -Encoding UTF8
        sqlcmd -b -t 900 -S "${{ secrets.PINGGY_TOKEN }}" -U "${{ secrets.SQL_USERNAME }}" -P "${{ secrets.SQL_PASSWORD }}" -i "verify_job.sql"
      shell: pwsh
