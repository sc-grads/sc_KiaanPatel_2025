name: Timesheet Project Full Deployment

on:
  workflow_dispatch: # Manual trigger only

env:
  SSIS_PACKAGE_NAME: "TimesheetEntry.dtsx"
  SSIS_FOLDER_NAME: "SSISProjectRun"
  SSIS_PROJECT_NAME: "SSISProject"
  SQL_SERVER_VERSION: "160"  # SQL Server 2022 uses version 160

jobs:
  deploy-and-execute:
    runs-on: windows-latest
    
    steps:
    # 1. Checkout repository
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Install only essential tools
    - name: Install SQL tools
      run: |
        choco install sqlserver-cmdlineutils -y --no-progress

    # 3. Database setup
    - name: Execute database setup
      run: |
        sqlcmd -b -t 600 -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -i "HandsOnProject/Timesheet/TableAndDBSetup.sql"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

    # 4. Deploy SSIS package using SQL 2022 assemblies
    - name: Deploy SSIS Package
      run: |
        # Use SQL 2022 assemblies (version 160)
        $ssisAssemblyPath = "C:\Program Files (x86)\Microsoft SQL Server\${{ env.SQL_SERVER_VERSION }}\SDK\Assemblies"
        if (-not (Test-Path $ssisAssemblyPath)) {
            $ssisAssemblyPath = "C:\Program Files\Microsoft SQL Server\${{ env.SQL_SERVER_VERSION }}\SDK\Assemblies"
        }
        
        # Verify assembly path exists
        if (-not (Test-Path $ssisAssemblyPath)) {
            Write-Error "SSIS assemblies not found at: $ssisAssemblyPath"
            exit 1
        }
        
        # Load required assemblies
        Add-Type -Path "$ssisAssemblyPath\Microsoft.SqlServer.Management.IntegrationServices.dll"
        Add-Type -Path "$ssisAssemblyPath\Microsoft.SqlServer.ConnectionInfo.dll"
        Add-Type -Path "$ssisAssemblyPath\Microsoft.SqlServer.Management.Sdk.Sfc.dll"

        $ispacPath = "HandsOnProject/Timesheet/SSISProject - Copy/bin/Development/SSISProject.ispac"
        if (-not (Test-Path $ispacPath)) {
          Write-Error "ISPAC file not found at: $ispacPath"
          Get-ChildItem -Recurse -Path . -Include *.ispac
          exit 1
        }

        # Create connection
        $sqlConnectionString = "Data Source=${{ secrets.PINGGY_TOKEN }};User ID=${{ secrets.SQL_USERNAME }};Password=${{ secrets.SQL_PASSWORD }};"
        $sqlConnection = New-Object System.Data.SqlClient.SqlConnection $sqlConnectionString
        
        try {
            # Create Integration Services object
            $integrationServices = New-Object Microsoft.SqlServer.Management.IntegrationServices.IntegrationServices $sqlConnection
            
            # Get SSISDB catalog
            $catalog = $integrationServices.Catalogs["SSISDB"]
            
            # Create folder if not exists
            if (-not $catalog.Folders[$env:SSIS_FOLDER_NAME]) {
                $folder = New-Object Microsoft.SqlServer.Management.IntegrationServices.CatalogFolder($catalog, $env:SSIS_FOLDER_NAME, $env:SSIS_FOLDER_NAME)
                $folder.Create()
            }
            
            # Read ISPAC file
            $projectBytes = [System.IO.File]::ReadAllBytes($ispacPath)
            
            # Deploy project
            $catalog.Folders[$env:SSIS_FOLDER_NAME].DeployProject($env:SSIS_PROJECT_NAME, $projectBytes)
            Write-Output "SSIS project deployed successfully to $($env:SSIS_FOLDER_NAME)/$($env:SSIS_PROJECT_NAME)"
        }
        catch {
            Write-Error "SSIS deployment failed: $_"
            exit 1
        }
        finally {
            $sqlConnection.Close()
        }

    # 5. Create or update SQL Agent job
    - name: Setup SQL Agent Job
      run: |
        $jobScript = @"
        USE msdb;
        
        IF NOT EXISTS (SELECT 1 FROM sysjobs WHERE name = 'TimesheetProjectRun')
        BEGIN
          EXEC dbo.sp_add_job @job_name = N'TimesheetProjectRun';
          
          EXEC sp_add_jobstep
            @job_name = N'TimesheetProjectRun',
            @step_name = N'Run SSIS Package',
            @subsystem = N'SSIS',
            @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E',
            @database_name = N'master';
          
          EXEC dbo.sp_add_jobschedule
            @job_name = N'TimesheetProjectRun',
            @name = N'RunNow',
            @enabled = 1,
            @freq_type = 1,
            @active_start_date = $(Get-Date -Format yyyyMMdd),
            @active_start_time = $(Get-Date -Format HHmmss);
          
          EXEC dbo.sp_add_jobserver @job_name = N'TimesheetProjectRun';
        END
        ELSE
        BEGIN
          EXEC sp_update_jobstep
            @job_name = N'TimesheetProjectRun',
            @step_id = 1,
            @command = N'/ISSERVER "\"\SSISDB\${{ env.SSIS_FOLDER_NAME }}\${{ env.SSIS_PROJECT_NAME }}\${{ env.SSIS_PACKAGE_NAME }}\"" /SERVER ""${{ secrets.PINGGY_TOKEN }}"" /Par "\"$ServerOption::LOGGING_LEVEL(Int16)\"";1 /Par "\"$ServerOption::SYNCHRONIZED(Boolean)\"";True /CALLERINFO SQLAGENT /REPORTING E';
        END
        "@
        
        $jobScript | Out-File -FilePath "setup_job.sql" -Encoding UTF8
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -i "setup_job.sql"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

    # 6. Execute and verify
    - name: Execute and Verify
      timeout-minutes: 20
      run: |
        # Start the job
        sqlcmd -b -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -Q "USE msdb; EXEC dbo.sp_start_job N'TimesheetProjectRun';"
        
        # Enhanced monitoring
        $verifySql = @"
        USE msdb;
        DECLARE @finalStatus INT = NULL;
        DECLARE @waitTime INT = 0;
        DECLARE @maxWait INT = 900; -- 15 minute timeout
        
        WHILE @waitTime < @maxWait
        BEGIN
          SELECT TOP 1 @finalStatus = run_status 
          FROM sysjobhistory 
          WHERE job_id = (SELECT job_id FROM sysjobs WHERE name = N'TimesheetProjectRun')
          ORDER BY instance_id DESC;
          
          IF @finalStatus IS NULL OR @finalStatus = 2 -- In Progress
          BEGIN
            WAITFOR DELAY '00:00:15';
            SET @waitTime = @waitTime + 15;
            SET @finalStatus = NULL;
          END
          ELSE
          BEGIN
            BREAK;
          END
        END
        
        -- Final status
        SELECT 
          CASE 
            WHEN @finalStatus = 1 THEN 'SUCCESS'
            WHEN @finalStatus = 0 THEN 'FAILED'
            WHEN @finalStatus = 3 THEN 'CANCELED'
            WHEN @finalStatus = 2 THEN 'STILL RUNNING'
            ELSE 'TIMEOUT'
          END AS JobStatus,
          @waitTime AS WaitTimeSeconds;
        
        -- Data verification
        USE TimesheetDB;
        SELECT 
          (SELECT COUNT(*) FROM Employee) AS EmployeeCount,
          (SELECT COUNT(*) FROM Timesheet) AS TimesheetCount,
          (SELECT COUNT(*) FROM AuditLog) AS AuditLogCount;
        "@
        
        $verifySql | Out-File -FilePath "verify_job.sql" -Encoding UTF8
        sqlcmd -b -t 1200 -S "${{ secrets.PINGGY_TOKEN }}" `
               -U "${{ secrets.SQL_USERNAME }}" `
               -P "${{ secrets.SQL_PASSWORD }}" `
               -i "verify_job.sql"
        if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
